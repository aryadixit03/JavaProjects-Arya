/***********************************************************************
* @Author: Arya Dixit   @Date: 15/06/2021   
*
* @File Name: UltimateGame<Arya>.java
*
* @Program Description: 
*  This program plays the game of ULTIMATE ROCK PAPER SCISSORS!
*  Instructions are available when you begin!
*
************************************************************************/
import java.util.Random; // imports the class that allows program to generate random numbers
import java.util.Scanner; // import the scanner class from the java library

class UltimateGame<Arya> {

   public static void main (String [] args) {
   
   // --- Variable Declaration and Initialization
   
   boolean playAgain = true;
   int lives = 5;
   
   // --- User Input, Program Execution, and ProgramOutput
  
   do {
   
      //further variable declaration and initialization
      String userName = "";
      int tries = 3;
      int roomChoice = 0, computerNumber = 0, userGuess = 0;
      int rock = 0, paper = 0, scissors = 0;
   
      boolean cheatCode = false;
      boolean replayRoom = true;
      
      String [] prize = {"ROCK", "PAPER", "SCISSORS"}; // creates array for prizes
      
      Scanner uI = new Scanner (System.in); // Creates the scanner object called uI that will accept input from the keyboard.

      //instructions for the game
      System.out.printf( "Welcome to the Ultimate Game of Rock Paper Scissors. \n\n++++++++++++++++++++++++++++++++++++++++++++++++++INSTRUCTIONS++++++++++++++++++++++++++++++++++++++++++++++++++\n\nThis is how the game works. Please read ALL of the following before starting! \nAfter reading these instructions, you will be taken to the Home Page. \nAt the Home Page, you have the option to enter 1 of 3 rooms. Each room will challenge you to \na number guessing game where you must correctly guess the random number \ngenerated by the computer in three tries. \n");
      System.out.printf( "-The first room will generate the numbers 1, 2, or 3. \n-The second room will generate the numbers 1 through 4 (inclusive). \n-The third room will generate the numbers 1 through 5 (inclusive). \n");
      System.out.printf( "\nIf you do not guess the number correctly in 3 tries in any room, you will lose a 'life' \nand be given the option to play the room again, or to return to the home screen to switch rooms. \n***However, you only have 5 LIVES. This means that if you lose 5 guessing games, \n   you are out of the game and your progress is lost. You must then re-start or exit the game. \n\nIf you guess correctly in 3 tries, you will be awarded a PRIZE! \n Beat room 1, and you will be awarded a 'Rock'. \n Beat room 2, and you will be awarded a 'Paper'. \n Beat room 3, you will be awarded a 'Scissors'. \nAfter you obtain all 3 of these items, you can unlock the Final Hidden Fourth Room, \nin which you will verse the BIG BOSS (computer) in a best out of 3 rock, paper, scissors game. \n\nGood Luck!\n\n");
      System.out.printf( "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n");
      
      //name input
      System.out.print("After you have read the instructions, please enter your name: ");
      userName = uI.nextLine(); //allows user to input name
         
      
      //for cheat code
      if (userName.equalsIgnoreCase("cheat")) {
      cheatCode = true;
      }
    
      do { // creates loop for all cases
  
         //room choice
         System.out.printf("Welcome to the Home Page %s! You currently have %d lives left. Which room would you like to enter? Please type in 1, 2, or 3.\n",userName,lives);
            while (!uI.hasNextInt()) //checks if the input is an integer because if not it will make user re-enter a room choice
            { 
               System.out.println("You did not enter an room option. Please enter 1, 2, or 3 to go to a room."); 
               uI.next();
            } 
            
         roomChoice = uI.nextInt(); // allows the user to enter a room number
         
         if (roomChoice < 1 || roomChoice > 3) { //checks if room choice is out of range to make them then re-enter a choice
            System.out.println("You did not enter an room option. Please type in 1, 2, or 3 to go to a room.");
            roomChoice = uI.nextInt(); // moves scanner input into the next token
         } 


         //begin switch so that depending on the room choice, a different room will appear
         switch (roomChoice) {

         //ROOM ONE
         case (1):
      
            if (rock == 1) { //checks if the user already won this room to then kick them out of it 
               System.out.printf("You already won the prize %s in this room (Room 1). You will now be taken back to the Home Page. \n",prize[0]); 
               break; 
            }
            
            replayRoom = true;  //re-sets replayRoom to true

            System.out.println("You have entered room 1!");
       
            do {
               
               tries = 3; //sets tries = 3
               computerNumber = (int)(Math.random()*3+1); // generates comp number between 1 and 3 inclusive
         
               //output if cheatCode is enabled 
               if (cheatCode == true) {
                  System.out.println("CHEAT CODE: The number the computer generated was: "+computerNumber);//CHEAT CODE
               }

               // For loop to ensure that the guessing game can only be played 3 times before a life is lost
               for (int i = 1; i < 4; ++i) {
   
                  System.out.println("\nPlease guess a number between 1 and 3 inclusive:");
                     while (!uI.hasNextInt()) //checks if the input is an integer
                     { 
                     System.out.println("You did not enter an option. Please guess either 1, 2, or 3.");
                     uI.nextLine(); // moves scanner input into the next token
                     }
               
                  userGuess = uI.nextInt(); // allows user to guess a number
                  
                  //if user guesses out of range
                  if (userGuess > 3 || userGuess < 1) {
                     System.out.println("That is not an option.");
                     uI.nextLine();
                  // if user guesses right
                  } else if (userGuess == computerNumber) { 
                     rock++;
                     System.out.printf("You guessed correctly! You have received the prize %s.\n",prize[0]);
                     break; 
                  //if user guesses wrong   
                  } else if (userGuess != computerNumber)  {
                     tries --;
                     System.out.println("You guessed incorrectly. You have "+tries+" tries left.");
                  }
           
              } // end for loop
            
              if (rock == 0) { // checks if the user did not win a rock to then make them lose a life
                  lives --; // if they did not win a rock they lose a life
                  System.out.println("You did not guess the correct number within 3 tries. You lost a life.");
              } 
              
              //output after room 1 has been played (asks user to play again)
              System.out.println("You have "+lives+" lives left."); // displays number of lives left 
              if (lives == 0) {
                 break;
              } 
              System.out.println("\nWould you like to play Room 1 again? Type true to stay in the room and replay, and type false to leave the room and return to the Home Page:");
                  while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                  { 
                     System.out.println("You did not enter an option. Please type 'true' to replay Room 1 or 'false' to leave and return to home.");
                     uI.next(); // moves scanner input into the next token
                  }
              replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
        
              //prevents user from playing again if they won
              if (rock == 1) { // checks if the user already has a rock to prevent them from replaying a room
                  while (replayRoom == true) { // lets user know that they cant replay room 1 since they already won it
                     System.out.println("Since you have already won the prize ROCK in this room (Room 1), you must leave the room by typing in 'false':");
                        while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                        { 
                              System.out.println("You did not enter an option. Please type 'true' to replay Room 1 or 'false' to leave and return to home.");
                              uI.next(); // moves scanner input into the next token
                        }     
                  replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
                  }
              }
           
            } while ( (replayRoom == true || userGuess > 3 || userGuess < 1 ) && lives > 0); // while the user CHOOSES to replay, or if the user guesses are out of range, And lives are still left, this tells program to replay/restart the room
     
          if (lives > 0) { //checks if there are lives left because if there are then it should print that the user has the room
            System.out.println("You have left room 1. \n");
          }
  
         break; // ends case 1


         //ROOM TWO
         case (2):
      
            if (paper == 1) { //checks if the user already won this room to then kick them out of it 
               System.out.printf("You already won the prize %s in this room (Room 2). You will now be taken back to the Home Page. \n",prize[1]); 
               break; 
            }
            
            replayRoom = true;  //re-sets replayRoom to true

            System.out.println("You have entered room 2!");
       
            do {
               
               tries = 3; //sets tries = 3
               computerNumber = (int)(Math.random()*4+1); // generates comp number between 1 and 4 inclusive
         
               //output if cheatCode is enabled 
               if (cheatCode == true) {
                  System.out.println("CHEAT CODE: The number the computer generated was: "+computerNumber);//CHEAT CODE
               }

               // For loop to ensure that the guessing game can only be played 3 times before a life is lost
               for (int i = 1; i < 4; ++i) {
   
                  System.out.println("\nPlease guess a number between 1 and 4 inclusive:");
                     while (!uI.hasNextInt()) //checks if the input is an integer
                     { 
                     System.out.println("You did not enter an option. Please guess either 1, 2, 3, or 4.");
                     uI.nextLine(); // moves scanner input into the next token
                     }
               
                  userGuess = uI.nextInt(); // allows user to guess a number
                  
                  //if user guesses out of range
                  if (userGuess > 4 || userGuess < 1) {
                     System.out.println("That is not an option.");
                     uI.nextLine();
                  // if user guesses right
                  } else if (userGuess == computerNumber) { 
                     paper++;
                     System.out.printf("You guessed correctly! You have received the prize %s.\n",prize[1]);
                     break; 
                  //if user guesses wrong   
                  } else if (userGuess != computerNumber)  {
                     tries --;
                     System.out.println("You guessed incorrectly. You have "+tries+" tries left.");
                  }
           
              } // end for loop
            
              if (paper == 0) { // checks if the user did not win a paper to then make them lose a life
                  lives --; // if they did not win a paper they lose a life
                  System.out.println("You did not guess the correct number within 3 tries. You lost a life.");
              } 
              
              //output after room 2 has been played (asks user to play again)
              System.out.println("You have "+lives+" lives left."); // displays number of lives left
              if (lives == 0) {
                 break;
              }
              System.out.println("\nWould you like to play Room 2 again? Type true to stay in the room and replay, and type false to leave the room and return to the Home Page:");
                  while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                  { 
                     System.out.println("You did not enter an option. Please type 'true' to replay Room 2 or 'false' to leave and return to home.");
                     uI.next(); // moves scanner input into the next token
                  }
              replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
        
              //prevents user from playing again if they won
              if (paper == 1) { // checks if the user already has a paper to prevent them from replaying a room
                  while (replayRoom == true) { // lets user know that they cant replay room 2 since they already won it
                     System.out.println("Since you have already won the prize PAPER in this room (Room 2), you must leave the room by typing in 'false':");
                        while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                        { 
                              System.out.println("You did not enter an option. Please type 'true' to replay Room 2 or 'false' to leave and return to home.");
                              uI.next(); // moves scanner input into the next token
                        }     
                  replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
                  }
              }
           
            } while ( (replayRoom == true || userGuess > 4 || userGuess < 1 ) && lives > 0); // while the user CHOOSES to replay, or if the user guesses are out of range, And lives are still left, this tells program to replay/restart the room
     
          if (lives > 0) { //checks if there are lives left because if there are then it should print that the user has the room
            System.out.println("You have left room 2. \n");
          }
  
         break; // ends case 2
         
         //ROOM THREE
         case (3):
      
            if (scissors == 1) { //checks if the user already won this room to then kick them out of it 
               System.out.printf("You already won the prize %s in this room (Room 3). You will now be taken back to the Home Page. \n",prize[2]); 
               break; 
            }

            replayRoom = true;  //re-sets replayRoom to true
            
            System.out.println("You have entered room 3!");
       
            do {
               
               tries = 3; //sets tries = 3
               computerNumber = (int)(Math.random()*5+1); // generates comp number between 1 and 5 inclusive
         
               //output if cheatCode is enabled 
               if (cheatCode == true) {
                  System.out.println("CHEAT CODE: The number the computer generated was: "+computerNumber);//CHEAT CODE
               }

               // For loop to ensure that the guessing game can only be played 3 times before a life is lost
               for (int i = 1; i < 4; ++i) {
   
                  System.out.println("\nPlease guess a number between 1 and 5 inclusive:");
                     while (!uI.hasNextInt()) //checks if the input is an integer
                     { 
                     System.out.println("You did not enter an option. Please guess either 1, 2, 3, 4, or 5.");
                     uI.nextLine(); // moves scanner input into the next token
                     }
               
                  userGuess = uI.nextInt(); // allows user to guess a number
                  
                  //if user guesses out of range
                  if (userGuess > 5 || userGuess < 1) {
                     System.out.println("That is not an option.");
                     uI.nextLine();
                  // if user guesses right
                  } else if (userGuess == computerNumber) { 
                     scissors++;
                     System.out.printf("You guessed correctly! You have received the prize %s.\n",prize[2]);
                     break; 
                  //if user guesses wrong   
                  } else if (userGuess != computerNumber)  {
                     tries --;
                     System.out.println("You guessed incorrectly. You have "+tries+" tries left.");
                  }
           
              } // end for loop
            
              if (scissors == 0) { // checks if the user did not win a scissors to then make them lose a life
                  lives --; // if they did not win a scissors they lose a life
                  System.out.println("You did not guess the correct number within 3 tries. You lost a life.");
              } 
              
              //output after room 3 has been played (asks user to play again)
              System.out.println("You have "+lives+" lives left."); // displays number of lives left 
              if (lives == 0) {
                 break;
              } 
              System.out.println("\nWould you like to play Room 3 again? Type true to stay in the room and replay, and type false to leave the room and return to the Home Page:");
                  while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                  { 
                     System.out.println("You did not enter an option. Please type 'true' to replay Room 3 or 'false' to leave and return to home.");
                     uI.next(); // moves scanner input into the next token
                  }
              replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
        
              //prevents user from playing again if they won
              if (scissors == 1) { // checks if the user already has a scissors to prevent them from replaying a room
                  while (replayRoom == true) { // lets user know that they cant replay room 3 since they already won it
                     System.out.println("Since you have already won the prize SCISSORS in this room (Room 3), you must leave the room by typing in 'false':");
                        while (!uI.hasNextBoolean()) //checks if the input is a boolean value to make user re-enter true or false if it is not
                        { 
                              System.out.println("You did not enter a valid option. Please type 'true' to replay Room 3 or 'false' to leave and return to home.");
                              uI.next(); // moves scanner input into the next token
                        }     
                  replayRoom = uI.nextBoolean(); // allows user to type if they wanna replay the room
                  }
              }
           
            } while ( (replayRoom == true || userGuess > 5 || userGuess < 1 ) && lives > 0); // while the user CHOOSES to replay, or if the user guesses are out of range, And lives are still left, this tells program to replay/restart the room
     
          if (lives > 0) { //checks if there are lives left because if there are then it should print that the user has the room
            System.out.println("You have left room 3. \n");
          }
  
         break; // ends case 3
         

        } // close switch

      //unlocks the fourth room With cheatCode
      if (rock == 1 && paper == 1 && scissors == 1 && cheatCode == true) {
         System.out.println("WOW! Now that you have collected all the prizes, a Rock, a Paper, and a Scissors, you have unlocked the final hidden room, ROOM 4! \nHere, you will now compete against the BIG BOSS in Rock Paper Scissors!");
         methodRoomFourWithCheat();
         break;
      }
      
      //unlocks the fourth room WITHOUT cheatCode
      if (rock == 1 && paper == 1 && scissors == 1 && cheatCode == false) {
         System.out.println("WOW! Now that you have collected all the prizes, a Rock, a Paper, and a Scissors, you have unlocked the final hidden room, ROOM 4! \nHere, you will now compete against the BIG BOSS in Rock Paper Scissors!");
         methodRoomFourNoCheat();
         break;
      }
      
      //checks if lives are 0 to break out of the while loop and to give option to replay
      if (lives == 0) {
         System.out.println ("Sorry, you have lost all your lives and the game is over.");
         break;
      }

    } while (replayRoom == false || lives > 0); //loops to the home page as long as user wants to exit a room and lives are left
 
    //output once game is over
    System.out.println("\nThank you for playing Ultimate Rock Paper Scissors! Would you like to play the entire game? Type true to replay, and type false to leave for good:");
    while (!uI.hasNextBoolean()) //checks if the input is a boolean value
        { 
        System.out.println("You did not enter an option. Please type 'true' to replay the game or 'false' to leave for good.");
        uI.next(); // moves scanner input into the next token
        }
    playAgain = uI.nextBoolean(); //allows user to input if they want to play the game again

  } while (playAgain == true); // PLAY THE ENTIRE GAME AGAIN
             
System.out.println("Good-Bye."); //prints goodbye
} // close main ()


 //Method for Rock Paper Scissors Game with Cheat Code
   
 private static void methodRoomFourWithCheat() {
  
  // Variable Declaration and Initialization
   
     int userWins = 0, compWins = 0, userPlay = 0, compPlay = 0, gamesPlayed = 0;
      
     Scanner uI = new Scanner (System.in); // Creates the scanner object called uI that will accept input from the keyboard.
   
  // User Input, Program Execution, and Program Output
         
     System.out.println("To play, remember Rock beats Scissors, Scissors beats Paper, and Paper beats Rock. \nThis is a best of 3 match, so you must win 2 more games than the Big Boss to win. \nEnter 1 to play rock, 2 to play paper, and 3 to play scissors. Good Luck!");
  
     do { // for RPS game
      
         compPlay = (int)(Math.random()*3+1); // generates random number between 1 and 3
         System.out.println("\nCHEAT CODE: The computer has played: "+compPlay);//CHEAT CODE - displays the computer's play

         System.out.printf("\nPlease enter 1 2 or 3 (aka Rock, Paper, or Scissors): ");
            while (!uI.hasNextInt()) //checks if the input is an integer
            { 
            System.out.println("You did not enter an integer as a play. Please play again."); // checks if user put a valid input
            uI.next(); // moves the scanner input into the next token
            } 
      
         userPlay = uI.nextInt(); // takes user input for user play 
            
            //checks if user input 
            if (userPlay < 1 || userPlay > 3) { // checks if number inputted is not a play that corresponds to rock paper or scissors
               System.out.println("That number is not 1, 2, or 3, therefore does not correspond to Rock, Paper, or Scissors. Please play again.");
            } else { // checks if number IS 1 2 or 3 
               System.out.println("The computer plays: "+compPlay); // displays what the computer plays
            }
         
            // Execution and Output Where User Wins
            if ((compPlay == 1 && userPlay == 2) || (compPlay == 2 && userPlay == 3) || (compPlay == 3 && userPlay == 1) ) {
               userWins ++;
               gamesPlayed ++;
               System.out.printf("\nYou win the point! \n");
               System.out.printf("\nYour Score: "+userWins+"\nThe Computer's Score: "+compWins);
               System.out.println("\nNumber of Games Played: "+gamesPlayed);
           // Execution and Output Where User Loses
           } else if ((compPlay == 1 && userPlay == 3) || (compPlay == 2 && userPlay == 1) || (compPlay == 3 && userPlay == 2) ) {
               compWins ++;
               gamesPlayed ++; // adds to the total game count
               System.out.printf("\nThe computer wins the point. \n");
               System.out.printf("\nYour Score: "+userWins+"\nThe Computer's Score: "+compWins);
               System.out.println("\nNumber of Games Played: "+gamesPlayed);
           // Execution and Output Where User is Tied
           } else if (compPlay == userPlay) { // if tie occurs, game count does not change
               System.out.printf("\nYou tied! Therefore no one gets a point and this does not count as a Game Played. \n");
           }
         
     }  while (userWins < 2 && compWins < 2); // // all statements in this loop are true lets the computer know to continue playing this as long as no one has won by 2 
      
     // execution and output once someone wins or loses
     if (compWins == 2) { // checks if the computer wins by 2 to then say user loses
         System.out.println("\nSorry, but the computer wins this match because they won 2 more games/points than you.");
         System.out.printf("\nYour Final Score: "+userWins+"\nThe Computer's Final Score: "+compWins+"\nTotal Games Played: "+gamesPlayed+"\n");
     } 
     else if (userWins == 2) { // checks if the user wins by two to then say user wins
         System.out.println("\nCongrats! You won this match because you won more games/points than the computer!.");
         System.out.printf("\nYour Final Score: "+userWins+"\nThe Computer's Final Score: "+compWins+"\nTotal Games Played: "+gamesPlayed+"\n");
     }
          
 } // close main for methodRoomFourWithCheat


 // Method for Rock Paper Scissors Game WITHOUT Cheat Code
   
 private static void methodRoomFourNoCheat() {
  
  // Variable Declaration and Initialization
   
     int userWins = 0, compWins = 0, userPlay = 0, compPlay = 0, gamesPlayed = 0;
      
     Scanner uI = new Scanner (System.in); // Creates the scanner object called uI that will accept input from the keyboard.
   
  // User Input, Program Execution, and Program Output
         
     System.out.println("To play, remember Rock beats Scissors, Scissors beats Paper, and Paper beats Rock. \nThis is a best of 3 match, so you must win 2 more games than the Big Boss to win. \nEnter 1 to play rock, 2 to play paper, and 3 to play scissors. Good Luck!");
  
     do { // for RPS game
      
         compPlay = (int)(Math.random()*3+1); // generates random number between 1 and 3
         
         System.out.printf("\nPlease enter 1 2 or 3 (aka Rock, Paper, or Scissors): ");
            while (!uI.hasNextInt()) //checks if the input is an integer
            { 
            System.out.println("You did not enter an integer as a play. Please play again."); // checks if user put a valid input
            uI.next(); // moves the scanner input into the next token
            } 
      
         userPlay = uI.nextInt(); // takes user input for user play 
            
            //checks if user input 
            if (userPlay < 1 || userPlay > 3) { // checks if number inputted is not a play that corresponds to rock paper or scissors
               System.out.println("That number is not 1, 2, or 3, therefore does not correspond to Rock, Paper, or Scissors. Please play again.");
            } else { // checks if number IS 1 2 or 3 
               System.out.println("The computer plays: "+compPlay); // displays what the computer plays
            }
         
            // Execution and Output Where User Wins
            if ((compPlay == 1 && userPlay == 2) || (compPlay == 2 && userPlay == 3) || (compPlay == 3 && userPlay == 1) ) {
               userWins ++;
               gamesPlayed ++;
               System.out.printf("\nYou win the point! \n");
               System.out.printf("\nYour Score: "+userWins+"\nThe Computer's Score: "+compWins);
               System.out.println("\nNumber of Games Played: "+gamesPlayed);
           // Execution and Output Where User Loses
           } else if ((compPlay == 1 && userPlay == 3) || (compPlay == 2 && userPlay == 1) || (compPlay == 3 && userPlay == 2) ) {
               compWins ++;
               gamesPlayed ++; // adds to the total game count
               System.out.printf("\nThe computer wins the point. \n");
               System.out.printf("\nYour Score: "+userWins+"\nThe Computer's Score: "+compWins);
               System.out.println("\nNumber of Games Played: "+gamesPlayed);
           // Execution and Output Where User is Tied
           } else if (compPlay == userPlay) { // if tie occurs, game count does not change
               System.out.printf("\nYou tied! Therefore no one gets a point and this does not count as a Game Played. \n");
           }
         
     }  while (userWins < 2 && compWins < 2); // // all statements in this loop are true lets the computer know to continue playing this as long as no one has won by 2 
      
     // execution and output once someone wins or loses
     if (compWins == 2) { // checks if the computer wins by 2 to then say user loses
         System.out.println("\nSorry, but the computer wins this match because they won 2 more games/points than you.");
         System.out.printf("\nYour Final Score: "+userWins+"\nThe Computer's Final Score: "+compWins+"\nTotal Games Played: "+gamesPlayed+"\n");
     } 
     else if (userWins == 2) { // checks if the user wins by two to then say user wins
         System.out.println("\nCongrats! You won this match because you won more games/points than the computer!.");
         System.out.printf("\nYour Final Score: "+userWins+"\nThe Computer's Final Score: "+compWins+"\nTotal Games Played: "+gamesPlayed+"\n");
     }
        
 } // close main for methodRoomFourNoCheat
   
} // close class UltimateGame<Arya>